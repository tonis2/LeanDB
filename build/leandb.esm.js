class e{constructor(e,t,s){return this.createTransaction(e,t,s)}async createTransaction(e,t,s){const a=await e,n=await a.transaction(t,s);return await n}}class t{constructor(e,t,s){this.name=e,this.version=t,this.db=s}async add(t){return new Promise(async(s,a)=>{const n=await new e(this.db,this.name,"readwrite"),r=await n.objectStore(this.name).put(t);r.onerror=(e=>{a(e.target.error.message)}),r.onsuccess=(async e=>{if(this.db.observer&&"sync"!==this.name){const t=await this.db.save_to_sync("add",r.source.name,e.target.result);this.db.observer(t)}s(e.target.result)})})}delete(t){return new Promise(async s=>{const a=await new e(this.db,this.name,"readwrite"),n=await a.objectStore(this.name).openCursor();n.onsuccess=(async e=>{const a=e.target.result;if(a){if(Object.keys(t).map(e=>Object.is(a.value[e],t[e])).filter(e=>!e).length<1&&(a.delete(),this.db.observer&&"sync"!==this.name)){const e=await this.db.save_to_sync("delete",n.source.name,a.key);this.db.observer(e)}a.continue()}else s()})})}update(t){return this.value=(s=>new Promise(async a=>{const n=await new e(this.db,this.name,"readwrite"),r=await n.objectStore(this.name).openCursor();r.onsuccess=(async e=>{const n=e.target.result;if(n){if(Object.keys(t).map(e=>Object.is(n.value[e],t[e])).filter(e=>!e).length<1){if(n.update(Object.assign(n.value,s)),this.db.observer&&"sync"!==this.name){const e=await this.db.save_to_sync("update",r.source.name,n.key);this.db.observer(e)}a(n.value)}n.continue()}else a(n)})})),this}async all(){return new Promise(async t=>{const s=await new e(this.db,this.name,"readwrite");(await s.objectStore(this.name)).getAll().onsuccess=(e=>{t(e.target.result)})})}async search(t,s){return new Promise(async a=>{const n=await new e(this.db,this.name,"readwrite");let r=await n.objectStore(this.name);if(t&&!t.index){const e=r.openCursor(),s=[];e.onsuccess=(async e=>{const n=e.target.result;if(n){Object.keys(t).map(e=>Object.is(n.value[e],t[e])).filter(e=>!e).length<1&&s.push(n.value),n.continue()}else a(s)})}t&&t.index&&((r=r.index(t.index)).getAll(t.key,s).onsuccess=(e=>{a(e.target.result)})),t||(r.getAll(null,s).onsuccess=(e=>{a(e.target.result)}))})}}class s{constructor(e,t,s){return this.name=e,this.version=t,this.start_database(s)}start_database(e){const t=indexedDB.open(this.name,this.version||1);return new Promise((s,a)=>{t.onsuccess=(e=>s(e.target.result)),t.onerror=(e=>a(e.target.result)),e&&(t.onupgradeneeded=(t=>e(t.target.result)))})}}const a={"<":IDBKeyRange.upperBound,">":IDBKeyRange.lowerBound,is:IDBKeyRange.only};function n(e,t){let s=[...e].join(""),[,n,r]=s.match(/^([a-z]+) ([a-z<>]+)/);return{index:n,key:a[r](t)}}export default class{constructor(e){this.name=e}async init(a,n){const r=new s(this.name,a,async e=>{(await e.createObjectStore("sync",{keyPath:"id",autoIncrement:!0})).createIndex("date","date",{unique:!1}),Object.entries(n).forEach(async t=>{const s=t[0],a=t[1].split(","),n=/d\++/.test(a[0]);n&&(a[0]=a[0].replace("++",""));const r=await e.createObjectStore(s,{keyPath:a[0],autoIncrement:n});a.forEach(e=>{const t=/&/i.test(e);t&&(e=e.replace("&","")),r.createIndex(e,e,{unique:t})})})});return Object.keys(n).forEach(e=>this[e]=new t(e,a,r)),this.observer&&(r.observer=this.observer,r.save_to_sync=(async(t,s,a)=>{const n=await new e(r,"sync","readwrite"),c={method:t,source:s,key:a,date:(new Date).toISOString()};return await n.objectStore("sync").put(c),c}),this.sync=new t("sync",a,r)),this}}export{n as query};
