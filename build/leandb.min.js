!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e=e||self).leandb=t()}(this,function(){"use strict";class e{constructor(e,t,s){return this.createTransaction(e,t,s)}async createTransaction(e,t,s){const n=await e,a=await n.transaction(t,s);return await a}}class t{constructor(e,t,s){this.name=e,this.version=t,this.db=s}async add(t){return new Promise(async(s,n)=>{const a=await new e(this.db,this.name,"readwrite");let r=await a.objectStore(this.name).put(t);r.onerror=(e=>{n(e.target.error.message)}),r.onsuccess=(e=>{s(e.target.result)})})}delete(t){return new Promise(async s=>{const n=await new e(this.db,this.name,"readwrite");(await n.objectStore(this.name).openCursor()).onsuccess=(e=>{const n=e.target.result;if(n){Object.keys(t).map(e=>Object.is(n.value[e],t[e])).filter(e=>!e).length<1&&n.delete(),n.continue()}else s()})})}update(t){return this.value=(s=>new Promise(async n=>{const a=await new e(this.db,this.name,"readwrite");(await a.objectStore(this.name)).openCursor().onsuccess=(e=>{const a=e.target.result;if(a){Object.keys(t).map(e=>Object.is(a.value[e],t[e])).filter(e=>!e).length<1&&(a.update(Object.assign(a.value,s)),n(a.value)),a.continue()}else n(a)})})),this}async find(t){return new Promise(async(s,n)=>{const a=await new e(this.db,this.name,"readwrite"),r=(await a.objectStore(this.name)).openCursor(),i=[];r.onsuccess=(e=>{const n=e.target.result;if(n){Object.keys(t).map(e=>Object.is(n.value[e],t[e])).filter(e=>!e).length<1&&i.push(n.value),n.continue()}else s(i)}),r.onerror=(e=>{n(`Failed to apply search in ${this.name}`)})})}}class s{constructor(e,t,s){return this.name=e,this.version=t,this.start_database(s)}start_database(e){const t=indexedDB.open(this.name,this.version||1);return new Promise((s,n)=>{t.onsuccess=(e=>s(e.target.result)),t.onerror=(e=>n(e.target.result)),e&&(t.onupgradeneeded=(t=>{e(t.target.result)}))})}}return class{constructor(e){this.name=e}async init(e,n){const a=new s(this.name,this.version,e=>{Object.entries(n).forEach(async t=>{const s=t[0],n=t[1].split(",");let a=/d\++/.test(n[0]);a&&(n[0]=n[0].replace("++",""));let r=await e.createObjectStore(s,{keyPath:n[0],autoIncrement:a});n.forEach(e=>{let t=/&/i.test(e);t&&(e=e.replace("&","")),r.createIndex(e,e,{unique:t})})})});return Object.keys(n).forEach(s=>this[s]=new t(s,e,a)),this}}});
